import numpy as np
from numpy import diff
import math

class shared(object):

    def __init__(self , angles, vmin, wmin, dc, dl, vd, srd, sld):
        
        
        
        # Navigation
        self.vmin = vmin
        self.wmin = wmin
        self.dc=dc
        self.dl=dl
        self.vd=vd
        self.srd=srd
        self.sld=sld        
        self.field=np.matrix([0,0])
        self.rol =None
        self.pit= None 
        self.classe= 7
        self.angles=angles              
    
    
    def get_class(self):
        d7 = np.sqrt((self.pit - 0.00181)*(743.0*self.pit + 69.1*self.rol - 2.08) + (self.rol - 0.0107)*(69.1*self.pit + 1277.0*self.rol - 13.7))
        d3 = np.sqrt((self.pit + 0.00189)*(642.0*self.pit - 105.0*self.rol + 20.9) - 1.0*(self.rol - 0.188)*(105.0*self.pit - 1244.0*self.rol + 234.0))     
        d4 = np.sqrt((self.pit + 0.00603)*(606.0*self.pit + 82.5*self.rol + 17.6) + (self.rol + 0.168)*(82.5*self.pit + 810.0*self.rol + 137.0))
        d1 = np.sqrt((self.pit - 0.189)*(537.0*self.pit + 189.0*self.rol - 101.0) + (self.rol + 0.00515)*(189.0*self.pit + 1166.0*self.rol - 29.9))
        d2 = np.sqrt((self.pit + 0.165)*(1344.0*self.pit + 68.7*self.rol + 221.0) + (self.rol - 0.00347)*(68.7*self.pit + 1766.0*self.rol + 5.25))
        d5 = np.sqrt(- 1.0*(self.rol - 0.15)*(45.2*self.pit - 972.0*self.rol + 139.0) - 1.0*(self.pit - 0.159)*(45.2*self.rol - 760.0*self.pit + 114.0))          
        d6 = np.sqrt((self.rol + 0.143)*(423.0*self.rol - 6.76*self.pit + 61.7) - 1.0*(self.pit - 0.18)*(6.76*self.rol - 792.0*self.pit + 143.0))   
        mahala=[d1,d2,d3,d4,d5,d6,d7]
        self.classe = np.where(mahala==min(mahala))[0][0]+1
    
    ######### Shared Control #########
    
    def get_fields(self,lasers, beta):
        field=np.array([[0.0,0],[0,0],[0,0],[0,0],[0,0]]) 
        count=np.array([[1.0],[1],[1],[1],[1]])
        dist=100;
        idx=0
        for k in range(len(self.angles)):
            
            
            if math.isnan(lasers[k]):
                pass   
            else:   
                x=lasers[k]*np.cos(self.angles[k])
                y=lasers[k]*np.sin(self.angles[k])
                th=0
                if x <= self.dc:
                    if y < -self.dl:
                        dist=-y-self.dl
                        th=-np.pi/2
                        idx=0
                    elif y > self.dl:
                        dist=y-self.dl
                        th=np.pi/2
                        idx=4
                else:
                    if y<-self.dl:
                        dist=np.sqrt(pow(x-self.dc,2)+pow(y+self.dl,2))
                        th=np.arctan2(y+self.dl,x-self.dc)
                        idx=1
                    elif y>self.dl:
                        dist=np.sqrt(pow(x-self.dc,2)+pow(y-self.dl,2))
                        th=np.arctan2(y-self.dl,x-self.dc)
                        idx=3
                    else:
                        dist=x-self.dc
                        th=0 
                        idx=2                  
                if dist <1.2 and dist > 0:                     
                    field[idx]=field[idx].copy()+np.array([(-beta[idx]/dist)*np.cos(th),(-beta[idx]/dist)*np.sin(th)])
                    count[idx,0]=count[idx,0]+1        
        self.field=np.sum(field/count, axis=0)           
                    
            
    
    def get_vels(self,alpha):
        v=self.vd+self.field[0]
        sr=self.srd+[0,self.field[1]]
        sl=self.sld+[0,self.field[1]]       
        thr= np.arctan2(sr[1],sr[0])
        thl= np.arctan2(sl[1],sl[0])
        vels=[0,0]
        
        if self.classe ==1:
            vels[0]=max(self.vmin,alpha[0]*v)
            vels[1]=np.tanh(pow((thr+thl)/1.8,5))                                      
  
                
        elif self.classe ==2:
            vels[0]=-2*self.vmin
            vels[1]=0 
            
        elif self.classe ==3:
            vels[0]=0
            vels[1]=min(-self.wmin , alpha[1]*thr)                 
       
                
        elif self.classe ==4:
            vels[0]=0
            vels[1]=max(self.wmin , alpha[1]*thl)   
                
        elif self.classe ==5:
            vels[0]=max(self.vmin,alpha[2]*v)
            vels[1]=min(-self.wmin , alpha[3]*thr)                    
            
        elif self.classe ==6:
            vels[0]=max(self.vmin,alpha[2]*v)
            vels[1]=max(self.wmin , alpha[3]*thl)                 

                
        elif self.classe ==7:             
            vels[0]=0
            vels[1]=0 
               
        self.v = vels[0]
        self.w = vels[1]     
    

      

        
        
        
